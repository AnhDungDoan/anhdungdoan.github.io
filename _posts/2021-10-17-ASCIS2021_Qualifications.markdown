---
layout: post
title: ASCIS Qualification 2021
date: 2021-10-13 00:00:00 +0300
description: WU Crypto # Add post description (optional)
img: ASCIS_Qual2021.png # Add image post (optional)
tags: [Crypto, CTF] # add tag
---

# **ASCIS Qualification 2021**

Ch√†o c√°c anh em, toi l√† dr00py, cryptographer c·ªßa UIT.W3 üòÉ

*khoe t√≠: team tui (UIT.W3) ƒë∆∞·ª£c ƒëi final c√°c anh em ·∫° he he he*

![image.png](/assets/img/ASCISQual2021/rank.png)

ƒê·∫øn b√¢y gi·ªù v·∫´n kh√¥ng bi·∫øt BTC c√≥ up l·ªôn ƒë·ªÅ crypto th√†nh ƒë·ªÅ web kh√¥ng n·ªØa .__. üôÑ

# **Easyone (100pts)**
> http://139.180.213.39:8100/

![image.png](/assets/img/ASCISQual2021/easyone1.png)

He he c·ª© register r·ªìi log acc v√¥ b√¨nh th∆∞·ªùng üòÄ

![image.png](/assets/img/ASCISQual2021/easyone2.png)

·ªû g√≥c tr√°i tr√™n, ngay ch·ªó `Hello, <t√™n user>`, khi m√¨nh b·∫•m v√†o n√≥ s·∫Ω direct qua `/flag`, nh∆∞ng l√†m g√¨ c√≥ v·ª• d·ªÖ v·∫≠y?

![image.png](/assets/img/ASCISQual2021/easyone3.png)

üòÉ b√¢y gi·ªù m√¨nh b·∫•n lo·∫°n, b·∫•m th·ª≠ v√¥ `About` xong n√≥ hi·ªán ra c√°i n√†y:

![image.png](/assets/img/ASCISQual2021/easyone4.png)

√î m√¨nh coi ƒë∆∞·ª£c source!!! C√≥ hy v·ªçng r·ªìi, source n√†y chia l√†m 2 ph·∫ßn:

*app.py*

```
#!/usr/bin/python3

import base64
import hashlib
from logging import NullHandler, root
import sys
import os
from Crypto import Random
from Crypto.Cipher import AES
from werkzeug.exceptions import abort
from functools import wraps
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, g
import mysql.connector
import werkzeug
import ssl
import OpenSSL
from OpenSSL import crypto
from certutils import CertInfo, verify_certificate_chain


DB_HOST = os.getenv("MYSQL_HOST", "xxxxxx")
DB_USER = os.getenv("MYSQL_USER", "xxxxxx") 
DB_PASS = os.getenv("MYSQL_PASSWORD", "xxxxxx") 
DB_NAME = os.getenv("MYSQL_DATABASE", "xxxxxx") 


def get_db_connection():
    conn = mysql.connector.connect(host = DB_HOST, user = DB_USER, passwd = DB_PASS, database = DB_NAME, auth_plugin='mysql_native_password')
    conn.autocommit = True
    return conn

def get_post(post_id):
    conn = get_db_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute('SELECT * FROM posts WHERE id = %s',
                        (post_id,))
    post = cur.fetchone()
    cur.close()
    conn.close()
    
    if post is None:
        abort(404)
    return post

def verify_login(username, password):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT id, username, password, email, role from users WHERE username = %s AND password = %s',
                    (username, password))
    user = cur.fetchone()
    
    cur.close()
    conn.close()

    return user

def do_register(username, password, email, role):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('INSERT INTO users (username, password, email, role) VALUES (%s, %s, %s, %s)',
                    (username, password, email, role))
    conn.commit()
    cur.close()
    conn.close()



def validate_certificate(file):
    
    trusted_certs = ['./ca.crt', './app.crt']

    for root_cert in trusted_certs:
        if not os.path.isfile(root_cert):
            raise Exception("Cannot found root certs")

    clientcert = file.stream.read()

    return verify_certificate_chain(clientcert, trusted_certs)


app = Flask(__name__)

app.config['SECRET_KEY'] = 'xxxxxxxxxxxxxxxx'

ROLE_ADMIN = 0
ROLE_USER = 1

def login_required(f):
    @wraps(f)
    def wrap(*args, **kwargs):

        try:
            if "username" not in session or session["username"] == "" or session["username"] is None:
                abort(401)
            print(session["username"])
        except:
            abort(401)
        
        return f(*args, **kwargs)
   
    return wrap


@app.route("/index")
@login_required
def index():
    conn = get_db_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute('SELECT * FROM posts')
    posts = cur.fetchall()
    cur.close()
    conn.close()
    return render_template('index.html', posts=posts)

@app.route("/flag")
@login_required
def flag():
    flag = "You are not admin"
    if session["role"] == ROLE_ADMIN:
        flag = "ASCIS{xxxxxx}"
    return render_template('flag.html', flag=flag)


@app.route('/<int:post_id>')
@login_required
def post(post_id):
    post = get_post(post_id)
    return render_template('post.html', post=post)

@app.route("/about")
@login_required
def about():
    return render_template('about.html')

@app.route("/register", methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        role = ROLE_USER

        if not username or not password:
            flash('Username and Password is required!')
        else:
            do_register(username, password, email, role)

            return redirect(url_for('login'))

    return render_template('register.html')


@app.route("/", methods=('GET', 'POST'))
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if not username or not password:
            flash('Username and Password is required!')
        else:
            # verify login
            user = verify_login(username, password)

            if not user:
                flash('Username and Password is not correct!')
            else:
                session["username"] = user[1]
                session["role"] = user[4]

                return redirect(url_for('index'))

    return render_template('login.html')

# This function only for admin
@app.route("/logincert", methods=('GET', 'POST'))
def logincert():
    if request.method == 'POST':
        username = None
        uploaded_file = request.files['file']
        if uploaded_file.filename != '':
            split_tup = os.path.splitext(uploaded_file.filename)
            if split_tup[1] != ".pem":
                flash('Cert file is invalid')
                return render_template('logincert.html')
            else:    
                username = validate_certificate(uploaded_file)

        if username is None:
            flash('Login cert is invalid!')
            return render_template('logincert.html')
        else:    
            session["username"] = username
            session["role"] = ROLE_ADMIN

            return redirect(url_for('index'))

    return render_template('logincert.html')

@app.route("/logout")
def logout():
    session["username"] = None
    session["role"] = None
    session.clear()
    return redirect(url_for('login'))

app.run(host="0.0.0.0", port=8100, debug=False)
```

*certutils.py*

```
import base64
import hashlib
from logging import NullHandler, root
import sys
import os
from Crypto import Random
from Crypto.Cipher import AES
from werkzeug.exceptions import abort
from functools import wraps
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, g
import mysql.connector
import werkzeug
import ssl
import OpenSSL
from OpenSSL import crypto
import datetime

class CertInfo:
    
    def __init__(
        self,
        cert=None,
        ):
        self.cert = cert
    def decode_x509name_obj(self, o):
        parts = []
        for c in o.get_components():
            parts.append(c[0].decode('utf-8') + '=' + c[1].decode('utf-8'))
        return ', '.join(parts)
    def cert_date_to_gmt_date(self, d):
        return datetime.datetime.strptime(d.decode('ascii'), '%Y%m%d%H%M%SZ')
    def cert_date_to_gmt_date_string(self, d):
        return self.cert_date_to_gmt_date(d).strftime("%Y-%m-%d %H:%M:%S GMT")
    def get_item(self, item, extension=None, return_as=None, algo=None):
        try:
            if item == 'subject':
                return self.decode_x509name_obj(self.cert.get_subject())

            elif item == 'subject_o':
                return self.cert.get_subject().O.strip()

            elif item == 'subject_cn':
                return self.cert.get_subject().CN.strip()

            elif item == 'extensions':
                ext_count = self.cert.get_extension_count()
                if extension is None:
                    ext_infos = []
                    for i in range (0, ext_count):
                        ext = self.cert.get_extension(i)
                        ext_infos.append(ext.get_short_name().decode('utf-8'))
                    return ext_infos

                for i in range (0, ext_count):
                    ext = self.cert.get_extension(i)
                    if extension in str(ext.get_short_name()):
                        return ext.__str__().strip()
                return None

            elif item == 'version':
                return self.cert.get_version()

            elif item == 'pubkey_type':
                pk_type = self.cert.get_pubkey().type()
                if pk_type == crypto.TYPE_RSA:
                    return 'RSA'
                elif pk_type == crypto.TYPE_DSA:
                    return 'DSA'
                return 'Unknown'

            elif item == 'pubkey_pem':
                return crypto.dump_publickey(crypto.FILETYPE_PEM, self.cert.get_pubkey()).decode('utf-8')

            elif item == 'serial_number':
                return self.cert.get_serial_number()

            elif item == 'not_before':
                not_before = self.cert.get_notBefore()
                if return_as == 'string':
                    return self.cert_date_to_gmt_date_string(not_before)
                return self.cert_date_to_gmt_date(not_before)

            elif item == 'not_after':
                not_after = self.cert.get_notAfter()
                if return_as == 'string':
                    return self.cert_date_to_gmt_date_string(not_after)
                return self.cert_date_to_gmt_date(not_after)

            elif item == 'has_expired':
                return self.cert.has_expired()

            elif item == 'issuer':
                return self.decode_x509name_obj(self.cert.get_issuer())

            elif item == 'issuer_o':
                return self.cert.get_issuer().O.strip()

            elif item == 'issuer_cn':
                return self.cert.get_issuer().CN.strip()

            elif item == 'signature_algorithm':
                return self.cert.get_signature_algorithm().decode('utf-8')

            elif item == 'digest':
                # ['md5', 'sha1', 'sha256', 'sha512']
                return self.cert.digest(algo)

            elif item == 'pem':
                return crypto.dump_certificate(crypto.FILETYPE_PEM, self.cert).decode('utf-8')

            else:
                return None

        except Exception as e:
            # logger.error('item = {}, exception, e = {}'.format(item, e))
            return None
    @property
    def subject(self):
        return self.get_item('subject')
    @property
    def subject_o(self):
        return self.get_item('subject_o')
    @property
    def subject_cn(self):
        return self.get_item('subject_cn')
    @property
    def subject_name_hash(self):
        return self.get_item('subject_name_hash')
    @property
    def extension_count(self):
        return self.get_item('extension_count')
    @property
    def extensions(self):
        return self.get_item('extensions')
    @property
    def extension_basic_constraints(self):
        return self.get_item('extensions', extension='basicConstraints')
    @property
    def extension_subject_key_identifier(self):
        return self.get_item('extensions', extension='subjectKeyIdentifier')
    @property
    def extension_authority_key_identifier(self):
        return self.get_item('extensions', extension='authorityKeyIdentifier')
    @property
    def extension_subject_alt_name(self):
        return self.get_item('extensions', extension='subjectAltName')
    @property
    def version(self):
        return self.get_item('version')
    @property
    def pubkey_type(self):
        return self.get_item('pubkey_type')
    @property
    def pubkey_pem(self):
        return self.get_item('pubkey_pem')
    @property
    def serial_number(self):
        return self.get_item('serial_number')
    @property
    def not_before(self):
        return self.get_item('not_before')
    @property
    def not_before_s(self):
        return self.get_item('not_before', return_as='string')
    @property
    def not_after(self):
        return self.get_item('not_after')
    @property
    def not_after_s(self):
        return self.get_item('not_after', return_as='string')
    @property
    def has_expired(self):
        return self.get_item('has_expired')
    @property
    def issuer(self):
        return self.get_item('issuer')
    @property
    def issuer_o(self):
        return self.get_item('issuer_o')
    @property
    def issuer_cn(self):
        return self.get_item('issuer_cn')
    @property
    def signature_algorithm(self):
        return self.get_item('signature_algorithm')
    @property
    def digest_sha256(self):
        return self.get_item('digest', algo='sha256')
    @property
    def pem(self):
        return self.get_item('pem')


def verify_certificate_chain(cert_pem, trusted_certs):
    certificate = crypto.load_certificate(crypto.FILETYPE_PEM, cert_pem)
    # parse ceritificate information
    clientcert = CertInfo(certificate)
    # get subject common name
    subject = clientcert.subject_cn
    issuer = clientcert.issuer_cn
    # Check if subject is admin user
    if subject != "admin":
        raise Exception("Not trusted user")
    # validate issuer 
    if issuer != "ca":
        raise Exception("Not trusted ca")
    thumbprint = clientcert.digest_sha256.decode('utf-8')
    #TODO: validate thumbprint
    #Create a certificate store and add your trusted certs
    try:
        store = crypto.X509Store()
        # Assuming the certificates are in PEM format in a trusted_certs list
        for _cert in trusted_certs:
            cert_file = open(_cert, 'r')
            cert_data = cert_file.read()
            client_certificate = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
            store.add_cert(client_certificate)
        # Create a certificate context using the store 
        store_ctx = crypto.X509StoreContext(store, certificate)
        # Verify the certificate signature, returns None if it can validate the certificate
        store_ctx.verify_certificate()
        # verify success
        return subject
    except Exception as e:
        print("[+] Debug certificate validation failed")
        return False
```

Th·∫≠t s·ª± l√† m√¨nh ngu v·ª• web n√†y c·ª±c, nh∆∞ng m√† c≈©ng r√°ng ƒë·ªçc, t·∫°i v√¨ team c≈©ng ƒëang c·ªë g·∫Øng!!! Sau 1 th·ªùi gian m√¨nh th·∫•y ch·ªó n√†y

*·ªü trong file app.py*
```
# This function only for admin
@app.route("/logincert", methods=('GET', 'POST'))
def logincert():
    if request.method == 'POST':
        username = None
        uploaded_file = request.files['file']
        if uploaded_file.filename != '':
            split_tup = os.path.splitext(uploaded_file.filename)
            if split_tup[1] != ".pem":
                flash('Cert file is invalid')
                return render_template('logincert.html')
            else:    
                username = validate_certificate(uploaded_file)

        if username is None:
            flash('Login cert is invalid!')
            return render_template('logincert.html')
        else:    
            session["username"] = username
            session["role"] = ROLE_ADMIN

            return redirect(url_for('index'))

    return render_template('logincert.html')
```

√Ä c√≥ route qua `/logincert` k√¨a, m√¨nh xem th·ª≠, ch·∫Øc ch·∫Øc ƒë√≥ l√† ch·ªó up file `.pem` ƒë·ªÉ authencatic ü§î

![image.png](/assets/img/ASCISQual2021/easyone5.png)

R·ªìi oke, m√¨nh x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ª© c·∫ßn l√†m r·ªìi! nh∆∞ng ·ªü function tr√™n, username tr√™n s·∫Ω ƒë∆∞a v√†o function `validate_certificate(uploaded_file)` v·ªõi uploaded_file l√† file `.pem` post l√™n! V√† m√¨nh xem qua h√†m `validate_certificate(uploaded_file)` th·ª≠:

```
def validate_certificate(file):
    
    trusted_certs = ['./ca.crt', './app.crt']

    for root_cert in trusted_certs:
        if not os.path.isfile(root_cert):
            raise Exception("Cannot found root certs")

    clientcert = file.stream.read()

    return verify_certificate_chain(clientcert, trusted_certs)
```

Th·∫≠t cƒÉng th·∫≥ng v√¨ m√¨nh ch∆∞a t·ª´ng ti·∫øp x√∫c s√¢u v√†o PEM file bao gi·ªù. H√†m tr√™n ƒë·ªÉ check trusted certificate th√¥i √†. C√°c anh em mu·ªën xem th√¨ ·ªü [link n√†y](https://en.wikipedia.org/wiki/Certificate_authority). Sau ƒë√≥ direct qua h√†m `verify_certificate_chain(clientcert, trusted_certs)` ·ªü file `certutils.py`

```
def verify_certificate_chain(cert_pem, trusted_certs):
    certificate = crypto.load_certificate(crypto.FILETYPE_PEM, cert_pem)
    # parse ceritificate information
    clientcert = CertInfo(certificate)
    # get subject common name
    subject = clientcert.subject_cn
    issuer = clientcert.issuer_cn
    # Check if subject is admin user
    if subject != "admin":
        raise Exception("Not trusted user")
    # validate issuer 
    if issuer != "ca":
        raise Exception("Not trusted ca")
    thumbprint = clientcert.digest_sha256.decode('utf-8')
    #TODO: validate thumbprint
    #Create a certificate store and add your trusted certs
    try:
        store = crypto.X509Store()
        # Assuming the certificates are in PEM format in a trusted_certs list
        for _cert in trusted_certs:
            cert_file = open(_cert, 'r')
            cert_data = cert_file.read()
            client_certificate = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
            store.add_cert(client_certificate)
        # Create a certificate context using the store 
        store_ctx = crypto.X509StoreContext(store, certificate)
        # Verify the certificate signature, returns None if it can validate the certificate
        store_ctx.verify_certificate()
        # verify success
        return subject
    except Exception as e:
        print("[+] Debug certificate validation failed")
        return False
```

**Ph√¢n t√≠ch mode on:**
- N√® ban ƒë·∫ßu n√≥ ƒë∆∞a file m√¨nh v√¥ ƒë·ªÉ analyze g√¨ ƒë√≥, n√≥i chung l√† ƒë·ªÉ l·∫•y l·∫°i c√°c thu·ªôc t√≠nh tr∆∞·ªõc khi decrypt. Trong ƒë√≥ c√≥ nhi·ªÅu thu·ªôc t√≠nh, ƒë·∫°i lo·∫°i nh∆∞: C, O, OU, ST, CN, datetime,... V√¨ m√¨nh debug file n√†y r·ªìi, n√™n c√°c anh em mu·ªën th·ª≠ th√¨ v√†o [link n√†y](https://8gwifi.org/SelfSignCertificateFunctions.jsp) ƒë·ªÉ gen 1 file `pem` ra import v√¥ file ch·∫°y th·ª≠ n√® üò•

![image.png](/assets/img/ASCISQual2021/easyone6.png)

- ƒê·ªÉ √Ω n√®, n·∫øu sau khi analyze ra, ```subject = "admin"``` v√† ```issuer = "ca"``` th√¨ m√¨nh bypass ƒë∆∞·ª£c challenge n√†y lu√¥n!.

- B√¢y gi·ªù m√¨nh xem th·ª≠ subject v√† issuer l√† b·∫±ng g√¨? L∆∞·ªõt xem l·∫°i code, m√¨nh x√°c ƒë·ªãnh ƒë∆∞·ª£c subject = clientcert.subject_cn = `self.cert.get_subject().CN.strip() (·ªü class)`, c√≤n issuer = clientcert.issuer_cn = `self.cert.get_issuer().CN.strip() (·ªü class)`

*Warning*: khi m√† generate file '.pem' ·ªü ƒë√¢u th√¨ m·∫°c ƒë·ªãnh 2 th·ª© ƒë√≥ s·∫Ω nh∆∞ nhau? ƒê√∫ng v·∫≠y! V√¨ ƒë√¢y l√† self-signed, n√™n l√† issuer lu√¥n l√† subject. Sau kho·∫£ng h∆°n 1h m√¨nh debug ƒë·ªÉ c·ªë g·∫Øng s·ª≠a issuer = "ca" th√¨ ƒë√£ r√£ r·ªùi sau khi t√¨m ƒë∆∞·ª£c t√†i li·ªáu n√≥i tr√™n ƒë√≥. V√¨ th·∫ø m√¨nh ph·∫£i t·ª± gen file pem ra...

- [Link n√†y](https://realpython.com/python-https/#becoming-a-certificate-authority) l√† c·ª©u tinh c·ªßa m√¨nh, khi m√† n√≥ ch·ªâ c√°ch gen file b·∫±ng python. V·∫≠y l√† n·∫øu m√¨nh control ƒë∆∞·ª£c code th√¨ m√¨nh c√≥ th·ªÉ thay ƒë·ªïi theo √Ω m√¨nh! ƒê√∫ng v·∫≠y, m√¨nh ƒëem h·∫øt c·∫£ v·ªÅ ƒë·ªÉ run step-by-step ƒë·ªÉ hi·ªÉu code. Sau ƒë√≥ m√¨nh s·ª≠a theo √Ω c·ªßa m√¨nh: nghƒ©a l√† m√¨nh s·∫Ω thay `issuer = "ca"` l·∫°i thay v√¨ l√† ƒë·ªÉ n√≥ b·∫±ng subject! M√¨nh ƒë∆∞a n√≥ th√†nh 1 tr∆∞·ªùng m·ªõi, ƒë·ªÉ gen ch√≠nh x√°c h∆°n. C·ª• th·ªÉ ·ªü 2 files sau:

*pki_helpers.py*
```
# pki_helpers.py
from datetime import datetime, timedelta
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes

def generate_public_key(private_key, filename, **kwargs):
    subject = x509.Name(
        [
            x509.NameAttribute(NameOID.COUNTRY_NAME, kwargs["country"]),
            x509.NameAttribute(
                NameOID.STATE_OR_PROVINCE_NAME, kwargs["state"]
            ),
            x509.NameAttribute(NameOID.LOCALITY_NAME, kwargs["locality"]),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, kwargs["org"]),
            x509.NameAttribute(NameOID.COMMON_NAME, kwargs["hostname"]),
        ]
    )

        issuer = x509.Name(
        [
            x509.NameAttribute(NameOID.COUNTRY_NAME, kwargs["country"]),
            x509.NameAttribute(
                NameOID.STATE_OR_PROVINCE_NAME, kwargs["state"]
            ),
            x509.NameAttribute(NameOID.LOCALITY_NAME, kwargs["locality"]),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, kwargs["org"]),
            x509.NameAttribute(NameOID.COMMON_NAME, "ca"),
        ]
    )


    # This certificate is valid from now until 30 days
    valid_from = datetime.utcnow()
    valid_to = valid_from + timedelta(days=30)

    # Used to build the certificate
    builder = (
        x509.CertificateBuilder()
        .subject_name(subject)
        .issuer_name(issuer)
        .public_key(private_key.public_key())
        .serial_number(x509.random_serial_number())
        .not_valid_before(valid_from)
        .not_valid_after(valid_to)
        .add_extension(x509.BasicConstraints(ca=True,
            path_length=None), critical=True)
    )

    # Sign the certificate with the private key
    public_key = builder.sign(
        private_key, hashes.SHA256(), default_backend()
    )

    with open(filename, "wb") as certfile:
        certfile.write(public_key.public_bytes(serialization.Encoding.PEM))

    return public_key

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

def generate_private_key(filename: str, passphrase: str):
    private_key = rsa.generate_private_key(
        public_exponent=65537, key_size=2048, backend=default_backend()
    )

    utf8_pass = passphrase.encode("utf-8")
    algorithm = serialization.BestAvailableEncryption(utf8_pass)

    with open(filename, "wb") as keyfile:
        keyfile.write(
            private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.TraditionalOpenSSL,
                encryption_algorithm=algorithm,
            )
        )

    return private_key
```

*gen.py*

```
from pki_helpers import generate_private_key, generate_public_key
private_key = generate_private_key("ca-private-key.pem", "secret_password")
print(private_key)
generate_public_key(private_key, filename="ca-public-key.pem", country="US", state="Maryland", locality="Baltimore", org="My CA Company", hostname="admin",)
```

- M√¨nh l·∫•y file `.pem` n√†y v√†o debug th·ª≠ file c·ªßa m√¨nh sau khi ch·ªânh s·ª≠a 1 lo·∫°t. √î, qua ƒë∆∞·ª£c h·∫øt üòÅüòÅüòÅ, th·∫ø l√† m√¨nh up l√™n server lu√¥n cho n√≥ng!!!

![image.png](/assets/img/ASCISQual2021/easyone7.png)

∆† t√™n ƒë·ªïi th√†nh `Hello, False`, r√©n vl, nh∆∞ng m√† m√¨nh c√≥ c·∫£m gi√°c th√†nh c√¥ng r·ªìi üòò. B·∫•m v√¥ th·ª≠:

![image.png](/assets/img/ASCISQual2021/easyone8.png)

N∆∞·ªõc m·∫Øt anh r∆°i, tr√≤ ch∆°i k·∫øt th√∫c.

> 1 it comment: b√†i n√†y t·ªën nhi·ªÅu th·ªùi gian vl, nh∆∞ng m√† m√¨nh m√†i ƒë√≠t ƒë·ªçc ƒë∆∞·ª£c file pem l√† g√¨, ca nh∆∞ n√†o,... Th√¥i th√¨ th√†nh qu·∫£ c≈©ng ƒë√°ng nh·ªâ ü§ó


# **Noone (100pts)**

>http://139.180.213.39:8300/

B√†i n√†y nhi·ªÅu ƒë·ªôi solve nh·∫•t trong m·∫£ng crypto (37). 

Flashback l·∫°i b√†i tr∆∞·ªõc, c√°c b∆∞·ªõc t∆∞∆°ng t·ª± ƒë·ªÉ coi l·∫°i source, tui l∆∞·ªùi ghi l·∫°i qu√° ƒëi üòë

*app.py*

```
#!/usr/bin/python3

import base64
import hashlib
import sys
import os
from Crypto import Random
from Crypto.Cipher import AES
from werkzeug.exceptions import abort
from functools import wraps
from flask import Flask, render_template, request, url_for, flash, redirect, session, make_response, g
import mysql.connector


DB_HOST = os.getenv("MYSQL_HOST", "xxxxxxx")
DB_USER = os.getenv("MYSQL_USER", "xxxxxxx") 
DB_PASS = os.getenv("MYSQL_PASSWORD", "xxxxxxx") 
DB_NAME = os.getenv("MYSQL_DATABASE", "xxxxxxx") 


# input: bytes, output: base64 text
def encrypt(plainbytes, key):
    
    iv = Random.new().read(AES.block_size)
    
    cipher = AES.new(key, AES.MODE_CFB, iv)
    
    cipherbytes = cipher.encrypt(plainbytes)

    ciphertext = base64.b64encode(iv + cipherbytes)

    return ciphertext


# input: base64 text, output: bytes
def decrypt(ciphertext, key):

    cipherbytes = base64.b64decode(ciphertext)

    iv = cipherbytes[:AES.block_size]

    cipher = AES.new(key, AES.MODE_CFB, iv)

    plainbytes = cipher.decrypt(cipherbytes[AES.block_size:])

    return plainbytes

def get_db_connection():
    conn = mysql.connector.connect(host = DB_HOST, user = DB_USER, passwd = DB_PASS, database = DB_NAME, auth_plugin='mysql_native_password')
    conn.autocommit = True
    return conn

def get_post(post_id):
    conn = get_db_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute('SELECT * FROM posts WHERE id = %s',
                        (post_id,))
    post = cur.fetchone()
    cur.close()
    conn.close()
    
    if post is None:
        abort(404)
    return post

def verify_login(username, password):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT id, username, password, email, encryptkey, role from users WHERE username = %s AND password = %s',
                    (username, password))
    user = cur.fetchone()
    
    cur.close()
    conn.close()

    return user

def do_register(username, password, email, role):
    key = base64.b64encode(Random.new().read(AES.block_size))
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('INSERT INTO users (username, password, email, role, encryptkey ) VALUES (%s, %s, %s, %s, %s)',
                    (username, password, email, role, key))
    conn.commit()
    cur.close()
    conn.close()

def get_encryptkey(userid):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT encryptkey from users WHERE id = %s',
                    (userid, ))
    user = cur.fetchone()
    
    cur.close()
    conn.close()

    return base64.b64decode(user[0])

app = Flask(__name__)

app.config['SECRET_KEY'] = 'xxxxxxxxxxxxxxxx'

ROLE_ADMIN = 0
ROLE_USER = 1

def login_required(f):
    @wraps(f)
    def wrap(*args, **kwargs):

        try:
        
            ciphertext = request.cookies.get('authtoken')

            userid = request.cookies.get('userid')

            if not ciphertext or not userid:
                return redirect(url_for('login'))

            encryptkey = get_encryptkey(userid)

            plainbytes = decrypt(ciphertext, encryptkey)

            usernamelen = int.from_bytes(plainbytes[:2], "little")
            usernameencoded = plainbytes[2:usernamelen+2]
            username = usernameencoded.decode("utf-8")
            role = plainbytes[usernamelen+2]
            
            g.username = username
            g.role = role

        except:
            abort(401)
        
        return f(*args, **kwargs)
   
    return wrap


@app.route("/index")
@login_required
def index():
    conn = get_db_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute('SELECT * FROM posts')
    posts = cur.fetchall()
    cur.close()
    conn.close()
    return render_template('index.html', posts=posts)

@app.route("/flag")
@login_required
def flag():
    flag = "You are not admin"
    if g.role == ROLE_ADMIN:
        flag = "xxxxxxxxxxxxxxxxxxxxxxx"
    return render_template('flag.html', flag=flag)


@app.route('/<int:post_id>')
@login_required
def post(post_id):
    post = get_post(post_id)
    return render_template('post.html', post=post)

@app.route("/about")
@login_required
def about():
    return render_template('about.html')

@app.route("/register", methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        role = ROLE_USER

        if not username or not password:
            flash('Username and Password is required!')
        else:
            do_register(username, password, email, role)

            return redirect(url_for('login'))

    return render_template('register.html')


@app.route("/", methods=('GET', 'POST'))
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if not username or not password:
            flash('Username and Password is required!')
        else:
            # verify login
            user = verify_login(username, password)

            if not user:
                flash('Username and Password is not correct!')
            else:
                
                userid = user[0]
                username = user[1]
                role = user[5]

                # get key
                key = base64.b64decode(user[4])

                # create authtoken
                usernamebytes = username.encode('utf-8')
                usernamelen = len(usernamebytes)
                plainbytes = len(usernamebytes).to_bytes(2, "little") + usernamebytes + role.to_bytes(1, "little")

                ciphertext = encrypt(plainbytes, key)

                response = make_response(redirect(url_for('index')))

                response.set_cookie('userid', str(userid))
                response.set_cookie('authtoken', ciphertext)

                return response

    return render_template('login.html')

@app.route("/logout")
def logout():
    response = make_response(redirect(url_for('index')))

    response.set_cookie('userid', '0', expires=0)
    response.set_cookie('authtoken', '', expires=0)

    return response

app.run(host="0.0.0.0", port=8080, debug=False)
```

Sau khi bi·∫øt 1 ch√∫t ƒë·ªânh v·ªÅ web run r·ªìi, m√¨nh ng√≥ th·∫≥ng v√†o `flag`:

```
@app.route("/flag")
@login_required
def flag():
    flag = "You are not admin"
    if g.role == ROLE_ADMIN:
        flag = "xxxxxxxxxxxxxxxxxxxxxxx"
    return render_template('flag.html', flag=flag)
```

M·ª•c ƒë√≠ch l·∫°i r·∫•t ƒë∆°n gi·∫£n: ƒë∆∞a m√¨nh th√†nh admin. C√≤n l√†m nh∆∞ n√†o th√¨ ch∆∞a bi·∫øt üò•

Ok gi·ªù xem m·∫•y function n√†o: √Ä ƒë√¢y r·ªìi, ph·∫ßn `login`

```
@app.route("/", methods=('GET', 'POST'))
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if not username or not password:
            flash('Username and Password is required!')
        else:
            # verify login
            user = verify_login(username, password)

            if not user:
                flash('Username and Password is not correct!')
            else:
                
                userid = user[0]
                username = user[1]
                role = user[5]

                # get key
                key = base64.b64decode(user[4])

                # create authtoken
                usernamebytes = username.encode('utf-8')
                usernamelen = len(usernamebytes)
                plainbytes = len(usernamebytes).to_bytes(2, "little") + usernamebytes + role.to_bytes(1, "little")

                ciphertext = encrypt(plainbytes, key)

                response = make_response(redirect(url_for('index')))

                response.set_cookie('userid', str(userid))
                response.set_cookie('authtoken', ciphertext)

                return response

    return render_template('login.html')
```

R√µ r√†ng l√∫c login, kh√¥ng ch·ªâ n√≥ verify acc c·ªßa m√¨nh, n√≥ c√≤n l·∫•y th√¥ng tin m√¨nh l√†m g√¨ n·ªØa k√¨aaaaa
√Ä, n√≥ l·ª•m plaintext ƒë·ªÉ decrypt, xong r·ªìi set authtoken üôÇ. V·∫≠y b√¢y gi·ªù m√¨nh xem ph·∫ßn `ciphertext = encrypt(plainbytes, key)` th√¥i. √Ä m√† key l√† g√¨ ƒë√≥ n√≥ l∆∞u trong db c·ªßa server, ch·∫Øc l√† gen random üò∂ n√™n m√¨nh kh√¥ng ƒëo√°n ƒë∆∞·ª£c ƒë√¢u.

```
def encrypt(plainbytes, key):
    
    iv = Random.new().read(AES.block_size)
    
    cipher = AES.new(key, AES.MODE_CFB, iv)
    
    cipherbytes = cipher.encrypt(plainbytes)

    ciphertext = base64.b64encode(iv + cipherbytes)

    return ciphertext
```

V∆°n, qu√° ng·∫Øn g·ªçn, m√† c√†ng ng·∫Øn c√†ng nguy hi·ªÉm, xem s∆° qua n√†o. H√™, ƒë√¢y l√† `AES mode CFB` v·ªõi iv ƒë∆∞·ª£c random, sau khi encrypt, k·∫øt qu·∫£ ƒë∆∞·ª£c tr·∫£ v·ªÅ l√† iv + ciphertext ƒë√£ ƒë∆∞·ª£c encode b·∫±ng base64. V·∫≠y nghƒ©a l√† m√¨nh l·ª•m authtoken v·ªÅ, sau ƒë√≥ l√† l·∫•y ƒë∆∞·ª£c iv v√† cipher text ngay!.

- Plaintext ph·∫£i c√≥ ƒë·ªô d√†i l√† b·ªôi c·ªßa 16. nh√¨n v√†o plainbytes ·ªü function tr√™n-tr√™n, th·∫•y l√† len(username) ch·ªâ l·∫•y 2 bytes, role l·∫•y 1 bytes, v·∫≠y gi·ªù m√¨nh ***T·∫†O ACCOUNT M·ªöI*** c√≥ ƒë·ªô d√†i l√† 13 l√† ngon (v√¨ c·ªông v√†o l√† 16). Sau khi dƒÉng nh·∫≠p, m√¨nh l·∫•y ƒë∆∞·ª£c iv v√† cipher l·∫ßn l∆∞·ª£t l√† 16 k√≠ t·ª± ƒë·∫ßu, v√† 16 k√≠ t·ª± cu·ªëi c·ªßa cipher. 
- Sau ƒë√¢y m√¨nh m√¥ t·∫£ c√°i `AES mode CFB`:

![image.png](/assets/img/ASCISQual2021/noone1.png)

- iv v√¥ 1 lo·∫°t x·ª≠ l√≠ ph·ª©c t·∫°p c·ªßa AES, xong xor plaintext block ƒë·∫ßu ra ƒë∆∞·ª£c cipher block ƒë·∫ßu, c√≤n v·ªÅ sau m√¨nh kh√¥ng th√®m t√≠nh n·ªØa. V√¨ plaintext c·ªßa m√¨nh ƒë√∫ng 16 k√≠ t·ª± nh∆∞ ƒë√£ gi·∫£i th√≠ch tr√™n n√™n ch·ªâ quan t√¢m block ƒë·∫ßu.
- Minh d√πng cipher ^ plain(c√°i n√†y m√¨nh bi·∫øt) ^ plain(m√¨nh mu·ªën t·∫°o) th√¨ s·∫Ω cho ra cipher m·ªõi m√¨nh c·∫ßn thay ƒë·ªïi.
- Sau ƒë√≥ m√¨nh s·ª≠a l·∫°i trong authtoken v√† F5 l·∫°i:

![image.png](/assets/img/ASCISQual2021/noone2.png)

- √ù t∆∞·ªüng l√† v·∫≠y, nh∆∞ng ƒë·ªÉ c√°c anh em mu·ªën solve l·∫°i th√¨ nhi·ªÅu th·ª© s·∫Ω thay ƒë·ªïi theo session. Code m√¨nh b·ªè ƒë√¢y, anh em thay s·ªë li·ªáu nh√© hehe

*solve.py*
```
import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import binascii

def xor(var, key):
    return bytes(a ^ b for a, b in zip(var, key))

def encrypt(plainbytes, key):
    
    iv = Random.new().read(AES.block_size)
    
    cipher = AES.new(key, AES.MODE_CFB, iv)
    
    cipherbytes = cipher.encrypt(plainbytes)

    ciphertext = base64.b64encode(iv + cipherbytes)

    return ciphertext

# input: base64 text, output: bytes
def decrypt(ciphertext, key):

    cipherbytes = base64.b64decode(ciphertext)

    iv = cipherbytes[:AES.block_size]

    cipher = AES.new(key, AES.MODE_CFB, iv)

    plainbytes = cipher.decrypt(cipherbytes[AES.block_size:])

    return plainbytes

user = [422, "dr00py1234567", "dr00py", "dr00py1@gmail.com", b'ZG9hbmFuaGR1bmcxMjM0NQ==', 1]

userid = user[0]
username = user[1]
role = user[5]

key = base64.b64decode(user[4])

usernamebytes = username.encode('utf-8')
usernamelen = len(usernamebytes)
plainbytes = len(usernamebytes).to_bytes(2, "little") + usernamebytes + role.to_bytes(1, "little")

#plainbytes1 = len(usernamebytes).to_bytes(2, "little") + usernamebytes + role.to_bytes(0, "little")
plainbytes1 = b'\r\x00dr00py1234567\x00'


authtoken = "hBlIJVgM/brypR2GoA0xs3MEyRUuyesjltZ58mkVaNI="
tokenarray = base64.b64decode(authtoken)
iv = tokenarray[:16]
cipherbytes = tokenarray[16:]

print("iv =", iv)
print("cipher =", cipherbytes)

new_cipher = xor(xor(plainbytes, cipherbytes), plainbytes1)
print("cipher =", new_cipher)
print(base64.b64encode(iv+new_cipher))

# thay cookie => solve

```

Kh√≤ kh√≤oooooo

# **ConfuseOne (464pts)**

>http://139.180.213.39/

B√†i n√†y th·∫≠t s·ª± c·∫£m ∆°n anh **@dtro20** trong team m√¨nh r·∫•t nhi·ªÅu ü•∞. Khai s√°ng qu√° nhi·ªÅu th·ª© lu√¥n.

![image.png](/assets/img/ASCISQual2021/confuse1.png)

-> Nh√¨n v√†o m√¨nh ch·∫£ c√≥ √Ω t∆∞·ªüng g√¨ c·∫£, ch·ªâ reg acc r·ªìi login v√¥ ng·ªìi nh√¨n th√¥i. Nh∆∞ng?

![image.png](/assets/img/ASCISQual2021/confuse2.png)

Token c·ªßa n√≥ l√† d·∫°ng JWT, v√† b√†i n√†y ch·∫Øc l√† JWT rs256!

Follow theo [write-up n√†y](https://ctftime.org/writeup/26173). ƒê·ªÉ c√≥ h∆∞·ªõng gi·∫£i n√®. R·∫•t ƒë·∫ßy ƒë·ªß v√† chi ti·∫øt. 

Sau ƒë√≥ thay authtoken v√†o th√¥i
![image.png](/assets/img/ASCISQual2021/confuse3.png)

Qu√° kinh kh·ªßng? ƒê·ªÅ web hay l√† crypto v·∫≠y ·∫°?
C√°m ∆°n mn ƒë√£ ƒë·ªçc t·ªõi ƒë√¢y :(((