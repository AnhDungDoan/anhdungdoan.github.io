---
layout: post
title: CookieHanHoan
date: 2021-11-03 00:00:00 +0300
description: WU Crypto # Add post description (optional)
img: CKHH.png # Add image post (optional)
tags: [Crypto, CTF] # add tag
---

# C√∫c ki h√¢n hoan

Ch√†o c√°c anh em, gi·∫£i n√†y c·ªßng c·ªë ki·∫øn th·ª©c kha kh√° n√™n l√†m vui l·∫Øm c√°c anh em √† <3 

# XOR (146 solves)
> XOR
![image.png](/assets/img/CKHH/xor.png)

encrypt.py
```
flag = ###SECRET###
key = ###SECRET###
assert len(key) == 1

def encrypt(a,b):
    return ''.join([hex(ord(b[i%len(b)]) ^ ord(a[i]))[2:] for i in range(0,len(a))])

with open('cipher.txt', 'w') as f:
	f.write(encrypt(flag, key))
```

cipher.txt
```
6c464b4d514b744817491714487449174b57
```

**Solve:**
- ·ªû encrypt.py, ƒë∆°n gi·∫£n l√† ch·ªâ encrypt flag c·ªßa m√¨nh v√† key, sau ƒë√≥ in ra cipher d∆∞·ªõi d·∫°ng m√£ hex.
- ƒê∆°n gi·∫£n h√≥a v·∫•n ƒë·ªÅ khi m√¨nh xem ·ªü file encrypt l√† ƒë·ªô d√†i c·ªßa key = 1. V·∫≠y m√¨nh ch·ªâ c·∫ßn bruteforce key l√† c√≥ th·ªÉ t√¨m ra ƒë∆∞·ª£c Flag n√†o c√≥ format "Flag{XXXXXX}" l√† ƒë√∫ng ·ªùi üòé

solve.py
```
import string
def encrypt(a,b):
    return ''.join([chr(ord(b[i%len(b)]) ^ ord(a[i])) for i in range(0,len(a))])

cipher = bytes.fromhex("6c464b4d514b744817491714487449174b57").decode()

for key in string.printable:
    flag = encrypt(cipher, key)
    if ('Flag' in flag):
        print(flag)
```

>FLAG: Flag{a^b=c=>b^c=a}


# MORSE (218 solves)
> Su·ªµt! T·∫≠p trung v√† ƒëeo tai nghe l√™n n√†o. G√† c√≥ nghe th·∫•y nh·ªãp beat kh√¥ng? H·ªç n√≥i g√¨ t·ª´ b√™n kia chi·∫øn tuy·∫øn Format: Flag{what_you_find}
![image.png](/assets/img/CKHH/morse.png)

**Solve:**
B√†i n√†y cho m√¨nh 1 file √¢m thanh <m√£ morse>. M√¨nh qu·∫≥ng l√™n tool l√† c√≥ ngay ph·ªù l√°c ‚úå

link tool: https://morsecode.world/international/decoder/audio-decoder-adaptive.html

![image.png](/assets/img/CKHH/morsesolve.png)

>FLAG: Flag{M.O.R.S.E.C.O.D.E}

# Julius Caesar (233 solves)
> V√¥ t√¨nh khi khai qu·∫≠t kh·∫£o c·ªï, G√† t√¨m ƒë∆∞·ª£c m·ªôt th√¥ng ƒëi·ªáp b√≠ ·∫©n kho·∫£ng h∆°n 100 nƒÉm tr∆∞·ªõc c√¥ng nguy√™n. Nghe ƒë·ªìn ƒë√¢y l√† m·ªôt b√≠ thu·∫≠t ƒë√£ b·ªã thay ƒë·ªïi c√¥ng th·ª©c c·ªßa m·ªôt v·ªã t∆∞·ªõng Julius Caesar, sau n√†y tr·ªü th√†nh v·ªã vua ƒë·∫ßu ti√™n c·ªßa ƒë·∫ø ch·∫ø La M√£ h√πng m·∫°nh. H√£y gi√∫p G√† gi·∫£i m·∫≠t th∆∞ n√†y!

![image.png](/assets/img/CKHH/caesar.png)

cipher.txt
```
Synt{Ry_Pynfvpb_Pvcure}
```

**Solve:**
- Nh·ªØng b√†i c√≥ d·∫•u hi·ªáu nh·∫≠n bi·∫øt r√µ r√†ng nh∆∞ th·∫ø n√†y th√¨ m√¨nh nghƒ© n√™n quƒÉng l√™n tool cho l·∫π, ti·∫øt ki·ªám th·ªùi gian, ƒë·ªô ch√≠nh x√°c tuy·ªát ƒë·ªëi he he 

link tool: https://www.dcode.fr/shift-cipher

![image.png](/assets/img/CKHH/caesarsolve.png)

Flag k√¨a l·ª•m ngay~~~

>FLAG: Flag{El_Clasico_Cipher}

# Sixty Four (203 solves)
> G√† ƒë·ªÉ l·∫°i m·ªôt th√¥ng ƒëi·ªáp b√≠ m·∫≠t nh∆∞ng n√≥ kh√¥ng l√†m kh√≥ ƒë∆∞·ª£c tr√≠ th√¥ng minh c·ªßa M√®o Yang H·ªì.

cipher.txt
```
NDY2QzYxNjc3QjVGNUY1RjQyNjE3MzY1MzYzNDc4NDg2NTc4NUY1RjVGN0Q=
```

**Solve:**
- Nh√¨n ph√°t bi·∫øt ngay l√† m√£ base64 =))). Th·∫ø l√† m√¨nh l·∫°i l·ª•m n√≥ quƒÉng v√¥ tool l√† l√° la...

![image.png](/assets/img/CKHH/64solve1.png)

- ∆†, kh√¥ng ra √†, nh∆∞ng m√¨nh ƒë∆∞·ª£c 1 ƒëo·∫°n m√£ kh√°c, ƒë√≥ l√† m√£ hex th√¨ ph·∫£i, m√¨nh quƒÉng v√¥ decode hex lu√¥n cho n√≥ nhanh

![image.png](/assets/img/CKHH/64solve2.png)
- Poong~ l·ª•m ti·ªÅn

link tool: https://gchq.github.io/CyberChef/
>FLAG: Flag{___Base64xHex___}

# Bruh AES (33 solves)
